#!/usr/bin/env bash

# exit on errors
set -o errexit
set -o pipefail

#
# Ensure semver is available (https://github.com/fsaintjacques/semver-tool/blob/master/src/semver)
#
echo -n "Checking for semver... "
if [ ! "$(which semver)" ]; then
  echo -e "ðŸš«\\n'semver' is not available."
  exit 1
fi
echo "âœ…"

#
# Validate semver bump version argument
#
echo -n "Checking release arguments... "
if [[ ! $1 =~ ^(patch|minor|major|release)$ ]]; then
  echo -e "ðŸš«\\nPlease specify a version to bump for the release (patch, minor, major, release). You passed '$1'".
  exit 1
fi
echo "âœ…"

NEW_VERSION="$(semver bump "$1" "$(cat VERSION)")"
HEX_USER="$(mix hex.user whoami)"

#
# Verify correct hex auth user
#
echo -n "Executing release as hex user '$HEX_USER'... "
if [ ! "$HEX_USER" == "vigetlabs" ]; then
  echo -e "ðŸš«\\nYou must been authed with hex as the 'vigetlabs' user in order to release colonel_kurtz_ex. Please run 'mix hex.user auth' and log in."
  exit 1
fi
echo "âœ…"

#
# Confirm changelog is up to date
#
read -rp "> Have you updated the CHANGELOG with the changes for '$NEW_VERSION'? (y/n) " CHANGELOG_CHOICE
case "$CHANGELOG_CHOICE" in
  n|N ) echo "Release cancelled, update the CHANGELOG and restart the release." && exit 1;;
  y|Y ) ;;
  * ) echo "Invalid response." && exit 1;;
esac

#
# Confirm release
#
read -rp "> Are you sure you want to bump the $1 version and release '$NEW_VERSION'? (y/n) " RELEASE_CHOICE
case "$RELEASE_CHOICE" in
  n|N ) echo "Release cancelled" && exit 1;;
  y|Y ) ;;
  * ) echo "Invalid response." && exit 1;;
esac

GIT_SHA=$(git rev-parse HEAD)
GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD)

#
# Only allow releases to happen in clean master branches
#
echo -n "Checking for git master branch... "
if [ ! "$GIT_BRANCH" == "master" ]; then
  echo -e "ðŸš«\\nReleases should only happen from the master branch. You have '$GIT_BRANCH' checked out."
  exit 1
fi
echo "âœ…"

#
# Ensure master is up to date with remote master
#
echo -n "Pulling latest master branch... "
git pull origin master -q

if [ ! "$GIT_SHA" == "$(git rev-parse HEAD)" ]; then
  echo -e "ðŸš«\\nPulled new changes from remote master, please verify and restart the release process."
  exit 1
fi
echo "âœ…"

#
# Ensure working directory is clean
#
echo -n "Checking for clean git working directory... "
if [[ -n $(git status -s) ]]; then
  echo -e "ðŸš«\\nYou have changes in your working tree. Please stash or commit them before issuing a release."
  exit 1
fi
echo "âœ…"

# silence mix command output
export MIX_QUIET=true

#
# Ensure formatting is up to date
#
echo -n "Running 'mix format'... "
mix format --check-formatted || \
(
  echo -e "\\nðŸš« Mix formatting is out of sync. Run 'mix format', commit the results, and restart the release." && \
  exit 1
)
echo "âœ…"

#
# Run checks (credo, dialyzer, test)
#
echo "Running mix checks... "
(
  mix credo --strict && \
  mix test && \
  mix types --quiet
) || ( \
  echo "ðŸš« One or more mix checks failed." && \
  exit 1
)
echo "âœ… All mix checks passed successfully!"

#
# Bump version number
#
echo -n "Bumping $1 version... "
echo "$NEW_VERSION" > VERSION
echo "âœ…"

#
# Generate and commit updated docs
#
echo "Updating docs... "
mix docs

git add VERSION
git add docs
git commit -m "[release] $NEW_VERSION Bump $1 version, update docs/"
echo "âœ… Docs updated and committed"

#
# Create new git tag
#
echo "Tagging $NEW_VERSION for release..."
git tag -a "$NEW_VERSION" -m "[release] Add tag for $NEW_VERSION"
git push origin master --tags
echo "âœ… Tagged release and pushed up the master branch"

#
# Publish to hex
#
echo -n "Publishing to hex... "
mix hex.publish || echo "ðŸš« Publication failed!" && exit 1
echo "âœ… Publication successful for $NEW_VERSION!"
